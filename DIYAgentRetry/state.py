# diy_agent/state.py

from typing import List, Sequence
from typing_extensions import TypedDict, Annotated
from langchain_core.messages import AnyMessage
from pydantic import BaseModel, Field
from langgraph.graph import add_messages

class DIYAgentState(TypedDict):
    """The state of the DIY Agent."""
    messages: Annotated[list[AnyMessage], add_messages]
    human_feedback_refine_or_not: str
    user_query: str
    diy_query: str
    DIY_Final_Plan: str
    retrieved_docs: List[str]
    summary:str
    num_plans:int
    human_refine_plan_string:str

class SearchQuery(BaseModel):
    search_query: str = Field(None, description="Search query for retrieval.")

class DIYPlan(BaseModel):
    plan: str = Field(None, description="DIY plan generated by the agent.")

class RefinedQuery(BaseModel):
    refined_query: str = Field(None, description="Refined search query for retrieval.")
